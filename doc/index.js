'use strict';

var lg = function (text) {
    console.log(text + '\n');
};

var md = require('../lib/md');

lg(md.h1('Welcome to md'));

lg(md.h2('What is md?'));


lg(md.mapLines([
    md.code('md') + ' is a markdown generator.',
    'It\'s a JavaScript library.'
]));


lg(md.h2('Why md?'));

lg(md.mapLines([
    'You might ask why this instead of just writing markdown?',

    'Well like most of the things I built, it\'s just because ',

    '',

    md.ol([
        'I ' + md.em('can') + ';',
        'It\'s a lot of fun;',
        'It\'ll probably save me some time later.'
    ]),

    '',

    'I was writing some module at work. And I wrote function-signature to' +
    ' generate function signatures on my class prototype. So I don\'t have to' +
    ' maintain the document again and again. Whenever my code changes, I get' +
    ' latest function signatures for free. (No jsdoc? Yes I\'m THAT lazy).',

    ' So the main part of my doc is generated by code now. So I thought,' +
    ' what\'s next? Naturally it\'s to generate everything from code.',

]));

lg(md.h2('How to use'));

lg(md.mapLines([
    md.strong('First of all -'),

    '',

    md.bq('Change is the only constant'),

    '',

    'This project just got started and are only with the most basic funcs.',

    md.em('So expect a lot of changes coming.', md.b),

    'The easiest way is to look at the test code in ' + md.code('/test'),

    'Run' + md.shell('npm test')

]));

lg(md.h3('API (subject to change)'));

lg(md.js(
    md.mapLines([
        'var md = require(\'md\')',
        'var text = \'some text to convert to markdown\'',
        '',
        '// Use like below. text will be applied with fn1, fn2, customFn...',
        '// and lastly, md.fn',
        '// If you supply a customFn, customFn should be ' +
            'function(text) -> textOutput',
        'md.fn(text[, md.fn1, md.fn2, customFn...])',
        '',
        '// for example',
        'md.code(\'md.h1()\') // --> `md.h1()`',
        'md.h3(\'md.badFn()\', md.code, md.strikethrough)' +
            ' // --> ### ~~`md.h1()`~~'
    ])
));

lg(md.h4('Available methods'));

lg(md.ul([
    'md.h1()',
    'md.h2()',
    'md.h3()',
    'md.h4()',
    'md.h5()',
    'md.strikethrough() | md.st()',
    'md.b() | md.strong()',
    'md.i() | md.em()',
    'md.bq()',
    'md.code()',
    'md.sh() | md.shell()',
    'md.js()',
    'md.html()',
    'md.css()',
    'md.js()',
    'md.mapLines()',
    'md.ul()',
    'md.li()',
    'md.ol()'
].map(md.code)));

lg(md.h2('What\'s the plan?'));

lg(md.mapLines([
    'Like most of my projects, this project starts just experimental.',

    'Maybe I\'m reinventing the wheel.',

    'Maybe I will be the only one who use/maintain it.',

    'But if you have any idea/suggestion. Feel free to let me know!'
]));

lg(md.h2('One more thing...'), md.em);

lg('This doc is generated with ' + md.code('md') + '.');

